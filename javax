package com.ubs.wma.kangaroo.platform.mdc.service.mdc.impl;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.ubs.wma.kangaroo.platform.mdc.model.mdc.ApproveRequest;
import com.ubs.wma.kangaroo.platform.mdc.model.mdc.ApproveResponse;
import com.ubs.wma.kangaroo.platform.mdc.model.mdc.CancellationRequest;
import com.ubs.wma.kangaroo.platform.mdc.model.mdc.CancellationResponse;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.ResponseEntity;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.reactive.function.client.WebClient.RequestBodySpec;
import org.springframework.web.reactive.function.client.WebClient.RequestBodyUriSpec;
import org.springframework.web.reactive.function.client.WebClient.RequestHeadersSpec;
import org.springframework.web.reactive.function.client.WebClient.ResponseSpec;

import java.nio.charset.StandardCharsets;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class LegacyMDCRequestClosureImplTest {

    @Mock private WebClient restClient;
    @Mock private RequestBodyUriSpec requestBodyUriSpec;
    @Mock private RequestBodySpec requestBodySpec;
    @Mock private RequestHeadersSpec<?> requestHeadersSpec;
    @Mock private ResponseSpec responseSpec;
    @Mock private ObjectMapper objectMapper;

    @InjectMocks
    private LegacyMDCRequestClosureImpl legacyMDCRequestClosure;

    @BeforeEach
    void setup() {
        legacyMDCRequestClosure = new LegacyMDCRequestClosureImpl(restClient, objectMapper);
    }

    @Test
    void approveLegacyMDCRequestTest() throws Exception {
        ApproveRequest approveRequest = mock(ApproveRequest.class);
        ApproveResponse approveResponse = mock(ApproveResponse.class);

        when(restClient.post()).thenReturn(requestBodyUriSpec);
        when(requestBodyUriSpec.uri(anyString())).thenReturn(requestBodySpec);
        when(requestBodySpec.body(any())).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.retrieve()).thenReturn(responseSpec);
        when(responseSpec.toEntity(eq(ApproveResponse.class))).thenReturn(ResponseEntity.ok(approveResponse));

        ApproveResponse response = legacyMDCRequestClosure.approveLegacyMDCRequest(123L, approveRequest, "SE08230");
        assertNotNull(response);
    }

    @Test
    void cancelLegacyMDCRequestTest() throws Exception {
        CancellationRequest cancellationRequest = mock(CancellationRequest.class);
        CancellationResponse cancellationResponse = mock(CancellationResponse.class);

        when(restClient.post()).thenReturn(requestBodyUriSpec);
        when(requestBodyUriSpec.uri(anyString())).thenReturn(requestBodySpec);
        when(requestBodySpec.body(any())).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.retrieve()).thenReturn(responseSpec);
        when(responseSpec.toEntity(eq(CancellationResponse.class))).thenReturn(ResponseEntity.ok(cancellationResponse));

        CancellationResponse response = legacyMDCRequestClosure.cancelLegacyMDCRequest(123L, cancellationRequest, "SE08230");
        assertNotNull(response);
    }
}
